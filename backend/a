from flask import Flask, jsonify, request
from datetime import datetime
from flask_cors import CORS 
import mysql.connector
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)
CORS(app)

db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="db_koperasi"
)


# ==================== PRODUK ====================


@app.route('/add_produk', methods=['POST'])
def add_produk():
    folder_path = 'static/images'
    data = request.form
    nama = data.get("nama")
    stock = int(data.get("stock"))
    harga = int(data.get("harga"))
    gambar = request.files.get("gambar")
    id_kategori = int(data.get("id_kategori"))

    if not gambar:
        return jsonify({'message': 'Gambar kosong'}), 400

    filename = secure_filename(gambar.filename)
    image_path = os.path.join(folder_path, filename)
    gambar.save(image_path)

    cursor = db.cursor(dictionary=True)
    cursor.execute(
        "INSERT INTO produk (nama, stock, harga, gambar, id_kategori) VALUES (%s, %s, %s, %s, %s)",
        (nama, stock, harga, filename, id_kategori)
    )
    db.commit()
    cursor.close()
    return jsonify({'message': 'produk ditambahkan'})


@app.route('/produk', methods=['GET'])
def get_produk_all():
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM produk")
    data = cursor.fetchall()
    cursor.close()
    return jsonify(data)


@app.route('/produk/<int:id>', methods=['GET'])
def get_produk_by_id(id):
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM produk WHERE id_produk = %s", (id,))
    produk = cursor.fetchone()
    cursor.close()

    if produk:
        return jsonify(produk)
    else:
        return jsonify({'message': 'Produk tidak ditemukan'}), 404


@app.route('/produk/<int:id>', methods=['PUT'])
def update_produk(id):
    nama = request.form.get("nama")
    stock = int(request.form.get("stock"))
    harga = int(request.form.get("harga"))
    id_kategori = int(request.form.get("id_kategori"))
    gambar_file = request.files.get("gambar")

    gambar_path = None
    cursor = db.cursor(dictionary=True)

    if gambar_file:
        gambar_path = f"static/images/{gambar_file.filename}"
        gambar_file.save(gambar_path)
    else:
        cursor.execute("SELECT gambar FROM produk WHERE id_produk = %s", (id,))
        result = cursor.fetchone()
        gambar_path = result['gambar']

    cursor.execute(
        "UPDATE produk SET nama=%s, stock=%s, harga=%s, gambar=%s, id_kategori=%s WHERE id_produk=%s",
        (nama, stock, harga, gambar_path, id_kategori, id)
    )
    db.commit()
    cursor.close()
    return jsonify({'message': 'Produk berhasil diupdate'})


@app.route('/produk/<int:id>', methods=['DELETE'])
def delete_produk(id):
    cursor = db.cursor(dictionary=True)
    cursor.execute("DELETE FROM produk WHERE id_produk=%s", (id,))
    db.commit()
    cursor.close()
    return jsonify({'message': 'produk dihapus'})


# ==================== PROFILE ====================


@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get("username")
    password = data.get("password")

    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE username=%s AND password=%s", (username, password))
    user = cursor.fetchone()
    cursor.close()

    if user:
        return jsonify({
            "message": "Login berhasil",
            "role": user["role"],
            "name": user["name"],
            "id": user["id_users"]
        })
    else:
        return jsonify({"message": "Username atau password salah"}), 401


@app.route('/register', methods=['POST'])
def register():
    data = request.json
    name = data.get("name")
    username = data.get("username")
    password = data.get("password")
    role = int(data.get("role"))

    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE username=%s", (username,))
    if cursor.fetchone():
        cursor.close()
        return jsonify({"status": "error", "message": "username sudah terdaftar"})

    if not name or not username or not password or role is None:
        cursor.close()
        return jsonify({"message": "Semua field harus diisi"}), 400

    cursor.execute("INSERT INTO users (name, username, password, role) VALUES (%s, %s, %s, %s)",
                   (name, username, password, role))
    db.commit()
    cursor.close()
    return jsonify({"status": "success", "message": "Register berhasil"})


@app.route('/profile/<int:user_id>', methods=['GET'])
def get_profile(user_id):
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE id_users = %s", (user_id,))
    user = cursor.fetchone()
    cursor.close()

    if user:
        return jsonify(user), 200
    else:
        return jsonify({'message': 'User not found'}), 404

# ==================== KERANJANG ====================

@app.route('/keranjang/<int:user_id>', methods=['GET'])
def get_keranjang(user_id):
    cursor = db.cursor(dictionary=True)
    cursor.execute('''
        SELECT c.id_checkout, c.jumlah, c.status, c.subtotal, c.tanggal,
               p.id_produk, p.nama, p.harga, p.gambar
        FROM checkout c
        JOIN produk p ON c.id_produk = p.id_produk
        WHERE c.id_user = %s AND c.status = 'pending'
    ''', (user_id,))
    data = cursor.fetchall()
    cursor.close()
    return jsonify(data)


@app.route('/keranjangwithstatus/<int:user_id>', methods=['GET'])
def get_keranjangs(user_id):
    try:
        cursor = db.cursor(dictionary=True)
        cursor.execute('''
            SELECT c.id_checkout, c.jumlah, c.status, c.subtotal, c.tanggal,
                   p.id_produk, p.nama AS nama_produk, p.harga, p.gambar
            FROM checkout c
            JOIN produk p ON c.id_produk = p.id_produk
            WHERE c.id_user = %s AND c.status = 'menunggu pembayaran'
        ''', (user_id,))
        data = cursor.fetchall()
        cursor.close()
        return jsonify(data), 200
    except Exception as e:
        return jsonify({'message': f'Error: {str(e)}'}), 500


@app.route('/keranjang/tambah', methods=['POST'])
def tambah_keranjang():
    data = request.json
    cursor = db.cursor(dictionary=True)
    cursor.execute('''
        INSERT INTO checkout (id_user, id_produk, jumlah, subtotal, status, tanggal)
        VALUES (%s, %s, %s, %s, %s, NOW())
    ''', (data['id_user'], data['id_produk'], data['jumlah'], data['subtotal'], 'pending'))
    db.commit()
    cursor.close()
    return jsonify({'message': 'Produk ditambahkan ke keranjang'})


@app.route('/keranjang/hapus/<int:id_checkout>', methods=['DELETE'])
def hapus_dari_keranjang(id_checkout):
    cursor = db.cursor(dictionary=True)
    cursor.execute("DELETE FROM checkout WHERE id_checkout = %s", (id_checkout,))
    db.commit()
    cursor.close()
    return jsonify({'message': 'Item dihapus dari keranjang'})


@app.route('/keranjang/checkout/<int:user_id>', methods=['PUT'])
def proses_checkout(user_id):
    cursor = db.cursor(dictionary=True)
    cursor.execute("UPDATE checkout SET status = 'menunggu pembayaran' WHERE id_user = %s AND status = 'pending'", (user_id,))
    db.commit()
    cursor.close()
    return jsonify({'message': 'Checkout berhasil'})


# ==================== TRANSAKSI ====================

@app.route('/transaksi', methods=['POST'])
def buat_transaksi():
    data = request.json
    id_user = data.get('id_user')
    metode_pembayaran = data.get('metode_pembayaran')

    cursor = db.cursor(dictionary=True)
    cursor.execute(
        "INSERT INTO transaksi (id_user, metode_pembayaran, status_pembayaran, tanggal) VALUES (%s, %s, %s, NOW())",
        (id_user, metode_pembayaran, 'menunggu konfirmasi')
    )
    id_transaksi = cursor.lastrowid

    cursor.execute("SELECT * FROM checkout WHERE id_user = %s AND status = 'menunggu pembayaran'", (id_user,))
    items = cursor.fetchall()

    for item in items:
        cursor.execute('''
            INSERT INTO transaksi_detail (id_transaksi, id_produk, jumlah, harga_satuan)
            VALUES (%s, %s, %s, %s)
        ''', (id_transaksi, item['id_produk'], item['jumlah'], item['harga_satuan']))

    cursor.execute("UPDATE checkout SET status = 'selesai' WHERE id_user = %s AND status = 'menunggu pembayaran'", (id_user,))
    db.commit()
    cursor.close()
    return jsonify({'message': 'Transaksi berhasil dibuat', 'id_transaksi': id_transaksi})


@app.route('/transaksi/<int:user_id>', methods=['GET'])
def get_riwayat_transaksi(user_id):
    try:
        cursor = db.cursor(dictionary=True)
        cursor.execute("SELECT * FROM transaksi WHERE id_user = %s ORDER BY tanggal DESC", (user_id,))
        data = cursor.fetchall()
        cursor.close()
        return jsonify(data), 200
    except Exception as e:
        return jsonify({'message': f'Error: {str(e)}'}), 500


@app.route('/transaksi/detail/<int:id_transaksi>', methods=['GET'])
def get_detail_transaksi(id_transaksi):
    cursor = db.cursor(dictionary=True)

    # Ambil detail produk dalam transaksi
    cursor.execute('''
        SELECT td.id, td.jumlah, td.subtotal,
               p.id_produk, p.nama, p.harga, p.gambar
        FROM transaksi_detail td
        JOIN produk p ON td.id_produk = p.id_produk
        WHERE td.id_transaksi = %s
    ''', (id_transaksi,))
    detail = cursor.fetchall()

    # Ambil data transaksi beserta nama user
    cursor.execute("""
        SELECT t.*, u.name
        FROM transaksi t
        JOIN users u ON t.id_user = u.id_users
        WHERE t.id_transaksi = %s
    """, (id_transaksi,))
    transaksi = cursor.fetchone()

    cursor.close()

    return jsonify({
        'transaksi': transaksi,
        'detail': detail
    })
@app.route('/transaksi/bayar', methods=['POST'])
def bayar_transaksi_terpilih():
    data = request.get_json()
    id_user = data.get('id_user')
    metode_pembayaran = data.get('metode_pembayaran')
    checkout_ids = data.get('id_checkout')
    tanggal = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if not (id_user and metode_pembayaran and checkout_ids):
        return jsonify({'message': 'Data tidak lengkap'}), 400

    try:
        cursor = db.cursor(dictionary=True)

        # 1. Buat transaksi baru
        cursor.execute("""
            INSERT INTO transaksi (id_user, metode_pembayaran, status_pembayaran, tanggal)
            VALUES (%s, %s, %s, %s)
        """, (id_user, metode_pembayaran, 'Menunggu Konfirmasi', tanggal))
        id_transaksi = cursor.lastrowid

        # 2. Masukkan ke transaksi_detail
        for id_checkout in checkout_ids:
            cursor.execute("SELECT id_produk, jumlah FROM checkout WHERE id_checkout = %s", (id_checkout,))
            row = cursor.fetchone()
            if row:
                id_produk = row['id_produk']
                jumlah = row['jumlah']
                cursor.execute("SELECT harga FROM produk WHERE id_produk = %s", (id_produk,))
                produk = cursor.fetchone()
                if produk:
                    subtotal = produk['harga'] * jumlah
                    cursor.execute("""
                        INSERT INTO transaksi_detail (id_transaksi, id_produk, jumlah, subtotal)
                        VALUES (%s, %s, %s, %s)
                    """, (id_transaksi, id_produk, jumlah, subtotal))

        # 3. Hapus dari checkout
        format_ids = ",".join(["%s"] * len(checkout_ids))
        cursor.execute(f"DELETE FROM checkout WHERE id_checkout IN ({format_ids})", checkout_ids)

        db.commit()
        cursor.close()
        return jsonify({'message': 'Transaksi berhasil', 'id_transaksi': id_transaksi}), 200

    except Exception as e:
        return jsonify({'message': 'Gagal membuat transaksi', 'error': str(e)}), 500

# Mendapat semua transaksi (untuk kasir)
@app.route('/transaksi', methods=['GET'])
def get_all_transaksi():
    cursor = db.cursor(dictionary=True)
    cursor.execute('''
        SELECT t.*, u.name 
        FROM transaksi t
        JOIN users u ON t.id_user = u.id_users
        ORDER BY t.tanggal DESC
    ''')
    data = cursor.fetchall()
    cursor.close()
    return jsonify(data)

# Update status transaksi
@app.route('/transaksi/<int:id_transaksi>/status', methods=['PUT'])
def update_status_transaksi(id_transaksi):
    data = request.json
    status = data.get('status')

    cursor = db.cursor()
    cursor.execute("UPDATE transaksi SET status_pembayaran = %s WHERE id_transaksi = %s", (status, id_transaksi))
    db.commit()
    cursor.close()

    return jsonify({'message': 'Status transaksi berhasil diperbarui'})

if __name__ == '__main__':
    app.run(debug=True)